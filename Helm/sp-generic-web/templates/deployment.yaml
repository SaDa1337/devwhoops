apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ include "sp-generic-web.fullname" . }}
  labels:
    app: {{ .Values.labels.app |quote }}
    team: {{ .Values.labels.team|quote }}
    release: {{ .Values.labels.release|quote }}
    os: {{ .Values.labels.os |quote }}
    app.kubernetes.io/name: {{ include "sp-generic-web.name" . }}
    helm.sh/chart: {{ include "sp-generic-web.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    heritage: {{ .Release.Service }}
  annotations:
    app: {{ .Values.labels.app|quote }}
    team: {{ .Values.labels.team |quote }}
    release: {{ .Values.labels.release|quote }}
    os: {{ .Values.labels.os |quote }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 0
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "sp-generic-web.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "sp-generic-web.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app: {{ .Values.labels.app |quote }}
        team: {{ .Values.labels.team|quote }}
        release: {{ .Values.labels.release|quote }}
        os: {{ .Values.labels.os |quote }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.env }}
          env:
            {{- range $name, $value := .Values.env }}
            - name: {{ $name }}
              value: {{ $value | quote }}
            {{- end }}
          {{- end }}
          ports:
            - name: http
              containerPort:  {{ .Values.containers.ports.containerPort }}
          livenessProbe:
            httpGet:
              path: {{ .Values.livenessProbe.httpGet.path }}
              port: {{ .Values.livenessProbe.httpGet.port }}
              scheme: {{ .Values.livenessProbe.httpGet.scheme }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.httpGet.path }}
              port: {{ .Values.readinessProbe.httpGet.port }}
              scheme: {{ .Values.readinessProbe.httpGet.scheme }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- if .Values.volumeMounts }}
          volumeMounts:
            {{ toYaml .Values.volumeMounts | nindent 12 }}
          {{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
      imagePullSecrets:
      - name: {{ .Values.image.secretName }}
      {{- if .Values.volumes }}
      volumes:
        {{- toYaml .Values.volumes | nindent 8 }}
      {{- end }}
